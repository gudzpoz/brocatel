import{_ as i,c as s,o as a,a4 as e}from"./chunks/framework.CPGI-sM3.js";const g=JSON.parse('{"title":"Caveats","description":"","frontmatter":{},"headers":[],"relativePath":"caveat.md","filePath":"caveat.md"}'),n={name:"caveat.md"},t=e(`<h1 id="caveats" tabindex="-1">Caveats <a class="header-anchor" href="#caveats" aria-label="Permalink to &quot;Caveats&quot;">‚Äã</a></h1><h2 id="headings-and-links" tabindex="-1">Headings_and Links <a class="header-anchor" href="#headings-and-links" aria-label="Permalink to &quot;Headings_and Links&quot;">‚Äã</a></h2><p>In some Markdown processors (that convert Markdown into HTML), headings get unique HTML <code>id</code>s that serve as page &quot;anchors&quot;, which links can then refer to with <code>#id-of-a-heading</code>. This is exactly why we choose to use headings and links to &quot;jump&quot; within stories - it is in sync with how you jump back and forth in an HTML page.</p><h3 id="generated-anchors-in-html-documents" tabindex="-1">Generated Anchors in HTML Documents <a class="header-anchor" href="#generated-anchors-in-html-documents" aria-label="Permalink to &quot;Generated Anchors in HTML Documents&quot;">‚Äã</a></h3><p>However, in most processors, the generated <code>id</code> usually differs a bit from the actual heading. The following example is extracted from <a href="https://github.com/Flet/github-slugger" target="_blank" rel="noreferrer"><code>github-slugger</code></a>, which we use to generate our anchors:</p><div class="language-markdown vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">markdown</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;"># foo</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[](</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;--shiki-light-text-decoration:underline;--shiki-dark-text-decoration:underline;">#foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;"># –ü—Ä–∏–≤–µ—Ç non-latin ‰Ω†Â•Ω</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[](</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;--shiki-light-text-decoration:underline;--shiki-dark-text-decoration:underline;">#–ø—Ä–∏–≤–µ—Ç-non-latin-‰Ω†Â•Ω</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;"># üòÑ emoji</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[](</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;--shiki-light-text-decoration:underline;--shiki-dark-text-decoration:underline;">#-emoji</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>It removes the quite a lot characters, but we are more interested in what gets preserved:</p><ul><li>Any letter under the <code>Letter</code> category,</li><li>Any mark under the <code>Mark</code> category,</li><li>Any normal numbers other than <a href="https://www.compart.com/en/unicode/category/No" target="_blank" rel="noreferrer">Other Numbers</a>,</li><li>All <a href="https://www.compart.com/en/unicode/category/Pc" target="_blank" rel="noreferrer">connectors punctuation</a>,</li><li>Any alphabetic characters,</li><li>The space character <code></code> (<code>0x20</code>) and hyphens <code>-</code> (<code>0x2d</code>).</li></ul><p>After that, it replaces all spaces <code></code> with hyphens.</p><h3 id="generated-anchors-in-brocatel" tabindex="-1">Generated Anchors in Brocatel <a class="header-anchor" href="#generated-anchors-in-brocatel" aria-label="Permalink to &quot;Generated Anchors in Brocatel&quot;">‚Äã</a></h3><p>I really can&#39;t remember those rules and I don&#39;t think that a system should require its users to do so. Therefor, we also transform all the links in the documents, so that users just don&#39;t need to be concerned about the charsets or any other string replacements:</p><div class="language-markdown vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">markdown</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;"># foo</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[](</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;--shiki-light-text-decoration:underline;--shiki-dark-text-decoration:underline;">#foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;"># –ü—Ä–∏–≤–µ—Ç non-latin ‰Ω†Â•Ω</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[](&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;--shiki-light-text-decoration:underline;--shiki-dark-text-decoration:underline;">#–ø—Ä–∏–≤–µ—Ç non latin ‰Ω†Â•Ω</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;) or [](</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;--shiki-light-text-decoration:underline;--shiki-dark-text-decoration:underline;">#–ø—Ä–∏–≤–µ—Ç-non-latin-‰Ω†Â•Ω</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;"># üòÑ emoji</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[](</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;--shiki-light-text-decoration:underline;--shiki-dark-text-decoration:underline;">#üòÑ-emoji</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>However, it can become a problem when the user wants to use anchors in Lua code: obviously (due to how Lua recognizes its symbols) <code>a word with space</code> is treated as four separate words and it won&#39;t really serve as a symbol.</p><p>To simplify things a bit, we allow using <code>a_word_with_space</code> to refer to the <code># a word with space</code> heading. However, again, this won&#39;t work with languages with non-ASCII daily letters, and the user will need to use <code>ROOT</code>:</p><div class="language-markdown vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">markdown</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;"># –ü—Ä–∏–≤–µ—Ç non-latin ‰Ω†Â•Ω</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[](</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;--shiki-light-text-decoration:underline;--shiki-dark-text-decoration:underline;">#–ø—Ä–∏–≤–µ—Ç-non-latin-‰Ω†Â•Ω</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\`\`\`lua</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">–ø—Ä–∏–≤–µ—Ç_non_latin_‰Ω†Â•Ω </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- Not an indentifier.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ROOT[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;–ø—Ä–∏–≤–µ—Ç-non-latin-‰Ω†Â•Ω&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- This somehow works.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\`\`\`</span></span></code></pre></div><p>Here comes a third caveat: Lua has poor regex and Unicode support, which means, it is hard to keep compiler rules (TypeScript) and runtime rules (Lua) in sync:</p><div class="language-markdown vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">markdown</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;"># ‰Ω†Â•ΩÔºå‰∏ñÁïåÔºÅ</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[](</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;--shiki-light-text-decoration:underline;--shiki-dark-text-decoration:underline;">#‰Ω†Â•Ω‰∏ñÁïå</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) or [](</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;--shiki-light-text-decoration:underline;--shiki-dark-text-decoration:underline;">#‰Ω†Â•ΩÔºå‰∏ñÁïåÔºÅ</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\`\`\`lua</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ROOT[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;‰Ω†Â•Ω‰∏ñÁïå&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- This works.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ROOT[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;‰Ω†Â•ΩÔºå‰∏ñÁïåÔºÅ&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- This does not.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\`\`\`</span></span></code></pre></div>`,17),h=[t];function l(o,r,d,p,k,c){return a(),s("div",null,h)}const u=i(n,[["render",l]]);export{g as __pageData,u as default};
