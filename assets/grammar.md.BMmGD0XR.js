import{_ as a,c as i,o as s,a4 as e}from"./chunks/framework.CPGI-sM3.js";const g=JSON.parse('{"title":"Brocatel Markdown Grammar Spec","description":"","frontmatter":{},"headers":[],"relativePath":"grammar.md","filePath":"grammar.md"}'),n={name:"grammar.md"},t=e('<h1 id="brocatel-markdown-grammar-spec" tabindex="-1">Brocatel Markdown Grammar Spec <a class="header-anchor" href="#brocatel-markdown-grammar-spec" aria-label="Permalink to &quot;Brocatel Markdown Grammar Spec&quot;">​</a></h1><h2 id="texts" tabindex="-1">Texts <a class="header-anchor" href="#texts" aria-label="Permalink to &quot;Texts&quot;">​</a></h2><ul><li>Usage: Same as texts in Markdown: if the text does not match any spec below, then it is a text.</li><li>Semantics: Texts.</li></ul><h2 id="comments" tabindex="-1">Comments <a class="header-anchor" href="#comments" aria-label="Permalink to &quot;Comments&quot;">​</a></h2><ul><li><p>Usage: Similar to HTML/XML comments since Markdown does not provide a comment grammar.</p></li><li><p>Semantics: Comments.</p><ul><li><p><code>&lt;!-- comment --&gt;</code>.</p></li><li><p>One may also use Lua comments in Lua code blocks if they find it convenient:</p><p><code>`-- comment`</code></p><div class="language-markdown vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">markdown</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">```lua</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">--[[</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  comment</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">]]--</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">```</span></span></code></pre></div></li></ul></li></ul><h3 id="interpolation" tabindex="-1">Interpolation <a class="header-anchor" href="#interpolation" aria-label="Permalink to &quot;Interpolation&quot;">​</a></h3><ul><li><p>Usage: Use Lua code in MDX expressions to interpolate the text with Lua values.</p></li><li><p>Semantics: The MDX expression is evaluated in the context of the current routine.</p><ul><li><code>1 + 1 is { 1 + 1 }</code> evaluates to <code>1 + 1 is 2</code>.</li></ul></li></ul><h3 id="marking-plural-variables-for-gettext" tabindex="-1">Marking Plural Variables For Gettext <a class="header-anchor" href="#marking-plural-variables-for-gettext" aria-label="Permalink to &quot;Marking Plural Variables For Gettext&quot;">​</a></h3><ul><li><p>Usage: Adds a <code>?</code> in the MDX expression to mark the variable that affects the plural forms of words in the text.</p></li><li><p>Semantics: The variable is marked for Gettext for easier I18N.</p><ul><li><code>You have { 1 + 1 ?} apples.</code> will generate a <code>msgid_plural</code> entry in the POT file so that the translation can be done in a better way.</li></ul></li></ul><h3 id="tags" tabindex="-1">Tags <a class="header-anchor" href="#tags" aria-label="Permalink to &quot;Tags&quot;">​</a></h3><ul><li><p>Usage: Prefixes the text with an inline directive to tag the text.</p></li><li><p>Semantics: Attaches extra info to the text to be used by external programs.</p><ul><li><code>:tag Text</code>.</li><li><code>:tag[value] Text</code>.</li><li><code>:data[{ 1 + 1 }] Text.</code>: Interpolation is allowed in tags. However, since tags are intended to pass program-specific data, plurality marks are ignored, and the string will not get passed to Gettext.</li></ul></li></ul><h2 id="headings" tabindex="-1">Headings <a class="header-anchor" href="#headings" aria-label="Permalink to &quot;Headings&quot;">​</a></h2><ul><li>Usage: Same as headings in Markdown.</li><li>Semantics: A heading defines an anchor that a link can jump to.</li></ul><h3 id="routine-definitions" tabindex="-1">Routine Definitions <a class="header-anchor" href="#routine-definitions" aria-label="Permalink to &quot;Routine Definitions&quot;">​</a></h3><ul><li><p>Usage: A heading that contains a MDX expression.</p></li><li><p>Semantics: A routine definition defines a routine. The string in the MDX expression is treated as routine-local variable names.</p><ul><li><code>## heading 1 {}</code> defines a routine named <code>heading-1</code>.</li><li><code>## heading 1 { var1 }</code> defines a routine named <code>heading-1</code> with a routine-local variable <code>var1</code>.</li></ul></li></ul><h2 id="links-routine-calls" tabindex="-1">Links &amp; Routine Calls <a class="header-anchor" href="#links-routine-calls" aria-label="Permalink to &quot;Links &amp; Routine Calls&quot;">​</a></h2><ul><li><p>Usage: Mostly the same as links in Markdown.</p><p>If the link looks like a &quot;normal&quot; link (e.g. begins with <code>https</code>), the compiler treats the link as it.</p></li><li><p>Semantics: A link either directs the story flow to a certain heading or calls a routine.</p><ul><li><code>[](#heading-1)</code> jumps to the heading <code>heading-1</code> if the heading is not a routine. Otherwise, it calls the routine <code>heading-1</code>.</li><li><code>[{ var1 = 1 }](#heading-1)</code> calls the routine <code>heading-1</code> with the routine-local variable <code>var1</code> set to <code>1</code>.</li><li><code>[](another.md#heading-1)</code> similarly calls/jumps to story in <code>another.md</code> with the heading <code>heading-1</code>. This allows splitting a story into multiple files. No manual file linking is needed.</li></ul></li></ul><h2 id="lua-evaluation" tabindex="-1">Lua Evaluation <a class="header-anchor" href="#lua-evaluation" aria-label="Permalink to &quot;Lua Evaluation&quot;">​</a></h2><h3 id="compile-time-evaluation" tabindex="-1">Compile-Time Evaluation <a class="header-anchor" href="#compile-time-evaluation" aria-label="Permalink to &quot;Compile-Time Evaluation&quot;">​</a></h3><ul><li><p>Usage: A code block with its meta string set to <code>macro</code>.</p></li><li><p>Semantics: The code block is evaluated at compile-time to extend the compiler with macros, etc.</p><ul><li><p>For example,</p><div class="language-markdown vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">markdown</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">```lua macro</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> hello_world</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> md.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">paragraph</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ md.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello world from a macro&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) })</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">```</span></span></code></pre></div><p>defines a macro <code>hello_world</code> that returns a Markdown paragraph with the text.</p></li></ul></li></ul><h3 id="runtime-evaluation" tabindex="-1">Runtime Evaluation <a class="header-anchor" href="#runtime-evaluation" aria-label="Permalink to &quot;Runtime Evaluation&quot;">​</a></h3><h4 id="global-lua-evaluation" tabindex="-1">Global Lua Evaluation <a class="header-anchor" href="#global-lua-evaluation" aria-label="Permalink to &quot;Global Lua Evaluation&quot;">​</a></h4><ul><li><p>Usage: A code block with its meta string set to <code>global</code>.</p></li><li><p>Semantics: The code block is evaluated at runtime when loading the story.</p><ul><li><p>For example,</p><div class="language-markdown vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">markdown</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">```lua global</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">player_name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Alice&quot;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">initial_score </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">```</span></span></code></pre></div><p>initializes the global state.</p></li></ul></li></ul><h4 id="local-lua-evaluation" tabindex="-1">Local Lua Evaluation <a class="header-anchor" href="#local-lua-evaluation" aria-label="Permalink to &quot;Local Lua Evaluation&quot;">​</a></h4><ul><li><p>Usage: Inline code snippets on a single line or Lua code blocks.</p></li><li><p>Semantics: These Lua code is run when the story passes through the code block.</p><ul><li><p><code>`v = 1`</code> sets the variable <code>v</code> to <code>1</code>, which is the same as:</p><div class="language-markdown vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">markdown</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">```lua</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">v </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">```</span></span></code></pre></div></li></ul></li></ul><h4 id="conditional-execution" tabindex="-1">Conditional Execution <a class="header-anchor" href="#conditional-execution" aria-label="Permalink to &quot;Conditional Execution&quot;">​</a></h4><ul><li><p>Usage: A paragraph starts with a inline code snippet, following by texts.</p></li><li><p>Semantics: The snippet is evaluated as Lua code, and if the result is true, the paragraph is show as texts.</p><ul><li><p><code> `score == 100` You win!</code></p><p>If the variable <code>score</code> is equal to <code>100</code>, the paragraph is shown.</p></li></ul></li></ul><h4 id="lua-runtime-environment" tabindex="-1">Lua Runtime Environment <a class="header-anchor" href="#lua-runtime-environment" aria-label="Permalink to &quot;Lua Runtime Environment&quot;">​</a></h4><p>See <a href="./arch.html">arch.md</a>.</p><h2 id="macro-usage" tabindex="-1">Macro Usage <a class="header-anchor" href="#macro-usage" aria-label="Permalink to &quot;Macro Usage&quot;">​</a></h2><ul><li><p>Usage: A customized Markdown grammar:</p><div class="language-markdown vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">markdown</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:::macro_name </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">`extra info`</span></span>\n<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Macro specific argument 1</span></span>\n<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Macro specific argument 2</span></span>\n<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ...</span></span>\n<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> :::nested_macro</span></span>\n<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Correct indentation is needed.</span></span></code></pre></div><p>Alternatively:</p><div class="language-markdown vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">markdown</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:::any_macro_name</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">```lua func</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">local</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> new_node </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> process</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arg)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> new_node</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">```</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Macro specific argument 1</span></span>\n<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Macro specific argument 2</span></span>\n<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ...</span></span>\n<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> :::nested_macro</span></span>\n<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Correct indentation is needed.</span></span></code></pre></div></li></ul><h4 id="built-in-macros" tabindex="-1">Built-In Macros <a class="header-anchor" href="#built-in-macros" aria-label="Permalink to &quot;Built-In Macros&quot;">​</a></h4><p>The <code>if</code>, <code>do</code>, <code>local</code> and <code>nil</code> macros are implemented by the JS/TS compiler, whose names are intentionally selected be Lua keywords to avoid conflicts with the user-defined macros.</p><ul><li><p><code>if</code>: Extended form of the <code>`condition` Text.</code> grammar with an <code>else</code> branch.</p><div class="language-markdown vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">markdown</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:::if </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">`score == 100`</span></span>\n<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> You win!</span></span>\n<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> You lose. (The else branch here.)</span></span></code></pre></div></li><li><p><code>do</code>: Calls a Lua function, passing the arguments specified in the list.</p><div class="language-markdown vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">markdown</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:::do </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">`function_name`</span></span>\n<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Argument 1</span></span>\n<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Argument 2</span></span></code></pre></div></li><li><p><code>local</code>: A quoted block of text, useful to avoid conflicting heading levels, mostly used by macros.</p><div class="language-markdown vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">markdown</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;"># heading-1</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:::local</span></span>\n<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;"> # heading-1</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  No heading name conflict.</span></span>\n<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> :::local</span></span>\n<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Nesting allowed.</span></span></code></pre></div></li><li><p><code>nil</code>: Ask the compiler to treat the arguments as plain Markdown.</p><div class="language-markdown vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">markdown</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:::nil</span></span>\n<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> `this is no more Lua expression but a Markdown code snippet`</span></span></code></pre></div></li></ul><p>The following macros are also built-in macros, but instead implemented in Lua as examples of custom macros. See <code>mdc/src/macros/builtin.lua</code> for details.</p><ul><li><p><code>loop</code>: Repeatedly executes part of the story.</p><div class="language-markdown vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">markdown</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:::loop </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">`label`</span></span>\n<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Text 1.</span></span>\n<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Text 2.</span></span></code></pre></div></li><li><p><code>switch</code>: Evaluates an expression, and executes the corresponding case.</p><div class="language-markdown vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">markdown</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:::switch </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">`a = 100`</span></span>\n<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> `a == 0`</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Result: 0</span></span>\n<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> `0 &lt; a and a &lt; 100`</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Result: 1~99</span></span>\n<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> `a == 100`</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Result: 100</span></span></code></pre></div></li></ul><h2 id="threads-coroutine-grammar" tabindex="-1">Threads &amp; Coroutine Grammar <a class="header-anchor" href="#threads-coroutine-grammar" aria-label="Permalink to &quot;Threads &amp; Coroutine Grammar&quot;">​</a></h2><h3 id="coroutine" tabindex="-1">Coroutine <a class="header-anchor" href="#coroutine" aria-label="Permalink to &quot;Coroutine&quot;">​</a></h3><ul><li><p>Usage: Use <code>&gt; [](#routine)</code> to create a coroutine.</p><p>If a coroutine runs to the end, one of the remaining threads will be selected as the next thread to run. If there is none, the story ends.</p></li></ul>',39),l=[t];function o(h,p,r,d,c,k){return s(),i("div",null,l)}const m=a(n,[["render",o]]);export{g as __pageData,m as default};
